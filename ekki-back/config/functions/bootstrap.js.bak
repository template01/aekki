'use strict';
var _ = require('lodash')
/**
 * An asynchronous bootstrap function that runs before
 * your application gets started.
 *
 * This gives you an opportunity to set up your data model,
 * run jobs, or perform some special logic.
 */
//
// module.exports = cb => {
//   cb();
// };
//
module.exports = cb => {
  var io = require('socket.io')(strapi.server);
  // var users = [];
  io.on('connection', function(socket) {
    socket.emit('hello', JSON.stringify({
      message: 'Hello World'
    }));
    // socket.user_id = (Math.random() * 100000000000000); // not so secure
    // users.push(socket); // save the socket to use it later

    // console.log(io.sockets.clients().connected)
    // CHECK IF CONNECTION TO SAME PATH EXISTS
    // var connections = io.sockets.clients()
    // console.log('go.lengt')
    // console.log( connections.connected)
    //
    // for (var i = 0, len = connections.length; i < len; i++) {
    //   console.log('connections.lengt')
    //  console.log(connections.length)
    // }


    function findClientsSocket(io, roomId, namespace) {
      var res = [],
        ns = io.of(namespace || "/"); // the default namespace is "/"

      if (ns) {
        for (var id in ns.connected) {
          if (roomId) {
            // ns.connected[id].rooms is an object!
            var rooms = Object.values(ns.connected[id].rooms);
            var index = rooms.indexOf(roomId);
            if (index !== -1) {
              res.push(ns.connected[id]);
            }
          } else {
            res.push(ns.connected[id]);
          }
        }
      }
      return res;
    }

    var connections = findClientsSocket(io)

    // console.log(findClientsSocket(io)[0].handshake.headers.referer)
    var checkifmoreconnectedtourl = function(inputUrl){
      var urls = []
      for (var i = 0, len = connections.length; i < len; i++) {
        urls.push(connections[i].handshake.headers.referer)
      }
      var numOfTrue = urls.filter(function(x){ return x === inputUrl; }).length;
      return numOfTrue
    }

    console.log(checkifmoreconnectedtourl(socket.handshake.headers.referer))

    socket.on('disconnect', () => {
      console.log('exittttttttttttttttttttttttttttttttt')
      console.log(checkifmoreconnectedtourl(socket.handshake.headers.referer)<2)


      // on DISCONNECT remove viewing
      var disconnectUrl = socket.handshake.headers.referer
      if (disconnectUrl.includes("wallets") && checkifmoreconnectedtourl(socket.handshake.headers.referer)<2) {
        // get walletid
        var id = disconnectUrl.split("/").pop()
        // emit disconnect
        io.sockets.emit('wallet_view', [id, "false"]);
        // set db
        return strapi.services.productview.edit({
          'viewingid': id
        }, {
          "viewing": false
        });
      }else{
        io.sockets.emit('wallet_view', [id, "true"]);

      }

      // users.forEach((user, i) => {
      //   // delete saved user when they disconnect
      //   if(user.user_id === socket.user_id) users.splice(i, 1);
      // });
    });
  });
  strapi.io = io;
  // send to all users connected
  strapi.emitToAllUsers = view => io.emit('wallet_view', view);
  cb();
};
